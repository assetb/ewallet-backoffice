import { Request, Response } from "express";
import multer from "multer";
import { FileService } from "../services/fileService";
import { EwalletService } from "../services/ewalletService";
import { UploadedFileRecord } from "../models/fileModels";
import { getCurrentISODate } from "../utils/utils";
import config from "../config";

const upload = multer({ storage: multer.memoryStorage() });

export async function getUploadedFilesHandler(req: Request, res: Response) {
  const files = await FileService.getUploadedFiles();
  res.json(files);
}

export const uploadFileMiddleware = upload.single("file");

export async function uploadFileHandler(req: Request, res: Response) {
  const file = (req as any).file as Express.Multer.File;
  const user = (req as any).user;
  
  if (!file || !user) {
    return res.status(400).json({ message: "–§–∞–π–ª –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ewallet –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
  if (!config.ewallet.token) {
    console.error("ERROR: EWALLET_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    return res.status(500).json({ 
      success: false, 
      message: "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: —Ç–æ–∫–µ–Ω Ewallet –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" 
    });
  }

  if (!config.ewallet.baseUrl) {
    console.error("ERROR: EWALLET_BASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    return res.status(500).json({ 
      success: false, 
      message: "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: URL Ewallet –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" 
    });
  }

  try {
    console.log(`üöÄ [MANAGER] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: ${file.originalname} (${file.size} –±–∞–π—Ç) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId}`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ Ewallet API
    const ewalletResponse = await EwalletService.processFileComplete(
      file.buffer,
      file.originalname
    );
    
    console.log(`‚úÖ [MANAGER] –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Ewallet –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, {
      fileName: file.originalname,
      state: ewalletResponse.data.state,
      progress: ewalletResponse.data.progress,
      logsCount: ewalletResponse.data.result.logs?.length || 0
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    let statusRecord: string;
    let uploadedCount = 0;
    let errorCount = 0;
    
    if (ewalletResponse.data.state === 'completed') {
      statusRecord = "SUCCESS";
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –ª–æ–≥–æ–≤
      const successLogs = ewalletResponse.data.result.logs?.filter(log => 
        log.includes('‚úÖ') && log.includes('—É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞')
      ) || [];
      uploadedCount = successLogs.length;
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏–∑ –ª–æ–≥–æ–≤
      const errorLogs = ewalletResponse.data.result.logs?.filter(log => 
        log.includes('‚ùå') || log.includes('–æ—à–∏–±–∫–∞')
      ) || [];
      errorCount = errorLogs.length;
      
    } else if (ewalletResponse.data.state === 'failed') {
      statusRecord = "ERROR";
      errorCount = 1;
    } else {
      statusRecord = "PROCESSING";
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const record: UploadedFileRecord = {
      fileName: file.originalname,
      date: getCurrentISODate(),
      uploaderId: user.userId,
      status: statusRecord,
      uploadedCount,
      errorCount
    };
    
    await FileService.appendUploadedFile(record);
    
    console.log(`üíæ [MANAGER] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:`, {
      fileName: file.originalname,
      status: statusRecord,
      uploadedCount,
      errorCount
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
    return res.json({ 
      success: true, 
      detail: {
        state: ewalletResponse.data.state,
        progress: ewalletResponse.data.progress,
        logs: ewalletResponse.data.result.logs,
        completedAt: ewalletResponse.data.result.completedAt,
        uploadedCount,
        errorCount
      }
    });
    
  } catch (err: any) {
    console.error(`üí• [MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:`, {
      fileName: file.originalname,
      userId: user.userId,
      error: err.message,
      stack: err.stack,
      code: err.code
    });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ ERROR
    const record: UploadedFileRecord = {
      fileName: file.originalname,
      date: getCurrentISODate(),
      uploaderId: user.userId,
      status: "ERROR",
      uploadedCount: 0,
      errorCount: 1
    };
    
    await FileService.appendUploadedFile(record);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    let errorMessage = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Ewallet";
    
    if (err.code === 'ERR_INVALID_CHAR') {
      errorMessage = "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–æ–∫–µ–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏";
    } else if (err.code === 'ENOTFOUND') {
      errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ewallet: —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
    } else if (err.code === 'ECONNREFUSED') {
      errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ewallet: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ";
    } else if (err.code === 'ETIMEDOUT') {
      errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ewallet: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è";
    } else if (err.response?.status) {
      const status = err.response.status;
      if (status === 400) {
        errorMessage = "–û—à–∏–±–∫–∞ Ewallet: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö";
      } else if (status === 401) {
        errorMessage = "–û—à–∏–±–∫–∞ Ewallet: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏";
      } else if (status === 404) {
        errorMessage = "–û—à–∏–±–∫–∞ Ewallet: —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω";
      } else if (status === 500) {
        errorMessage = "–û—à–∏–±–∫–∞ Ewallet: –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞";
      } else {
        errorMessage = `–û—à–∏–±–∫–∞ Ewallet: ${status} - ${err.response.statusText}`;
      }
    } else if (err.message) {
      errorMessage = `–û—à–∏–±–∫–∞ Ewallet: ${err.message}`;
    }
    
    console.error(`üìù [MANAGER] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:`, {
      fileName: file.originalname,
      errorMessage
    });
    
    return res.status(500).json({ 
      success: false, 
      message: errorMessage,
      detail: {
        error: err.message,
        code: err.code,
        status: err.response?.status
      }
    });
  }
}
