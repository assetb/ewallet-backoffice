import axios from "axios";
import FormData from "form-data";
import config from "../config";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if (!config.ewallet.token) {
  console.error("ERROR: EWALLET_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
const token = config.ewallet.token.trim();
if (token.includes('\n') || token.includes('\r') || token.includes('\t')) {
  console.error("ERROR: EWALLET_TOKEN —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, —Ç–∞–±—É–ª—è—Ü–∏–∏)");
  process.exit(1);
}

const ewalletClient = axios.create({
  baseURL: config.ewallet.baseUrl,
  timeout: 30000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
});

export interface UploadResponse {
  success: boolean;
  message: string;
  data: {
    fileId: string;
  };
}

export interface ProcessResponse {
  success: boolean;
  message: string;
  data: {
    jobId: string;
    fileId: string;
  };
}

export interface StatusResponse {
  success: boolean;
  message: string;
  data: {
    id: string;
    state: 'completed' | 'failed' | 'active' | 'waiting' | 'delayed';
    progress: number;
    result: {
      status: string;
      logs: string[];
      completedAt?: string;
      error?: string;
    };
  };
}

export class EwalletService {
  /**
   * –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
   * @param fileBuffer - –±—É—Ñ–µ—Ä —Ñ–∞–π–ª–∞
   * @param originalName - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
   * @returns –æ—Ç–≤–µ—Ç —Å fileId
   */
  static async uploadTransactionsFile(fileBuffer: Buffer, originalName: string): Promise<UploadResponse> {
    console.log(`üîÑ [EWALLET] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞: ${originalName} (${fileBuffer.length} –±–∞–π—Ç)`);
    
    const form = new FormData();
    form.append("token", token);
    form.append("file", fileBuffer, { filename: originalName });
    
    const headers = {
      ...form.getHeaders()
    };
    
    console.log(`üì§ [EWALLET] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞:`, {
      url: `${config.ewallet.baseUrl}/command/transactions/third/upload`,
      tokenLength: token.length,
      tokenPreview: token.substring(0, 10) + "...",
      fileName: originalName,
      fileSize: fileBuffer.length
    });
    
    try {
      const response = await axios.post(
        `${config.ewallet.baseUrl}/command/transactions/third/upload`,
        form,
        { headers }
      );
      
      console.log(`‚úÖ [EWALLET] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:`, {
        fileId: response.data.data?.fileId,
        message: response.data.message
      });
      
      return response.data;
    } catch (error: any) {
      console.error(`‚ùå [EWALLET] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:`, {
        fileName: originalName,
        error: error.message,
        status: error.response?.status,
        statusText: error.response?.statusText,
        responseData: error.response?.data
      });
      throw error;
    }
  }

  /**
   * –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   * @param fileId - ID —Ñ–∞–π–ª–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ
   * @returns –æ—Ç–≤–µ—Ç —Å jobId
   */
  static async processTransactions(fileId: string): Promise<ProcessResponse> {
    console.log(`üîÑ [EWALLET] –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ñ–∞–π–ª–∞: ${fileId}`);
    
    const requestBody = {
      token: token,
      fileId: fileId
    };
    
    console.log(`üì§ [EWALLET] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É:`, {
      url: `${config.ewallet.baseUrl}/command/transactions/third/process`,
      fileId: fileId,
      tokenLength: token.length
    });
    
    try {
      const response = await ewalletClient.post(
        "/command/transactions/third/process",
        requestBody,
        {
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );
      
      console.log(`‚úÖ [EWALLET] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞:`, {
        jobId: response.data.data?.jobId,
        fileId: response.data.data?.fileId,
        message: response.data.message
      });
      
      return response.data;
    } catch (error: any) {
      console.error(`‚ùå [EWALLET] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`, {
        fileId: fileId,
        error: error.message,
        status: error.response?.status,
        statusText: error.response?.statusText,
        responseData: error.response?.data
      });
      throw error;
    }
  }

  /**
   * –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @param jobId - ID –∑–∞–¥–∞—á–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ
   * @returns —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  static async checkProcessingStatus(jobId: string): Promise<StatusResponse> {
    console.log(`üîÑ [EWALLET] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏: ${jobId}`);
    
    const requestBody = {
      token: token
    };
    
    console.log(`üì§ [EWALLET] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞:`, {
      url: `${config.ewallet.baseUrl}/command/transactions/third/status/${jobId}`,
      jobId: jobId,
      tokenLength: token.length
    });
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º POST –≤–º–µ—Å—Ç–æ GET, —Ç–∞–∫ –∫–∞–∫ GET —Å —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞ –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è
      const response = await axios.post(
        `${config.ewallet.baseUrl}/command/transactions/third/status/${jobId}`,
        requestBody,
        {
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );
      
      console.log(`‚úÖ [EWALLET] –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω:`, {
        jobId: jobId,
        state: response.data.data?.state,
        progress: response.data.data?.progress,
        message: response.data.message
      });
      
      return response.data;
    } catch (error: any) {
      console.error(`‚ùå [EWALLET] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:`, {
        jobId: jobId,
        error: error.message,
        status: error.response?.status,
        statusText: error.response?.statusText,
        responseData: error.response?.data
      });
      throw error;
    }
  }

  /**
   * –ü–æ–ª–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
   * @param fileBuffer - –±—É—Ñ–µ—Ä —Ñ–∞–π–ª–∞
   * @param originalName - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
   * @returns —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  static async processFileComplete(fileBuffer: Buffer, originalName: string): Promise<StatusResponse> {
    console.log(`üöÄ [EWALLET] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: ${originalName}`);
    
    try {
      // –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
      const uploadResponse = await this.uploadTransactionsFile(fileBuffer, originalName);
      const fileId = uploadResponse.data.fileId;
      
      // –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const processResponse = await this.processTransactions(fileId);
      const jobId = processResponse.data.jobId;
      
      // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
      const statusResponse = await this.checkProcessingStatus(jobId);
      
      console.log(`üéâ [EWALLET] –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, {
        fileName: originalName,
        fileId: fileId,
        jobId: jobId,
        finalState: statusResponse.data.state,
        progress: statusResponse.data.progress
      });
      
      return statusResponse;
    } catch (error: any) {
      console.error(`üí• [EWALLET] –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:`, {
        fileName: originalName,
        error: error.message,
        stack: error.stack
      });
      throw error;
    }
  }
} 